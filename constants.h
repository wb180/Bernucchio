#ifndef CONSTANTS_H
#define CONSTANTS_H

#include <array>
#include <cstdint>

const std::size_t kBoardSize = 8;
const std::size_t kBitBoardSize = 64;

enum Castlings : std::size_t
{
    kWhiteCastling_0_0   = 1,
    kWhiteCastling_0_0_0 = 1 << 1,
    kBlackCastling_0_0   = 1 << 2,
    kBlackCastling_0_0_0 = 1 << 3
};

const std::size_t kHashCastlingSize = 16;
const std::size_t kHashEnPassantSize = 16;

const std::size_t kHashEnPassantMagic = 0X1000F0606A5A400;
const std::size_t kBitShift16 = 60;

enum StartBits : std::size_t
{
    kFirstRowBitsStartBit   = kBoardSize *(kBoardSize - 1),
    kSecondRowBitsStartBit  = kBoardSize *(kBoardSize - 2),
    kThirdRowBitsStartBit   = kBoardSize *(kBoardSize - 3),
    kFourthRowBitsStartBit  = kBoardSize *(kBoardSize - 4),
    kFifthRowBitsStartBit   = kBoardSize *(kBoardSize - 5),
    kSixthRowBitsStartBit   = kBoardSize *(kBoardSize - 6),
    kSeventhRowBitsStartBit = kBoardSize *(kBoardSize - 7),
    kEigthRowBitsStartBit   = kBoardSize *(kBoardSize - 8)
};

enum MoveMasks : std::size_t
{
    kFrom = 63,
    kTo   = 63 << 6,
    kPromote = 3 << 12,
    kFlag = 3 << 14
};

enum MoveFlags : std::size_t
{
    kCastling = 1,
    kEnPassant,
    kPromotion
};

const std::size_t kWhitePawns = 0;
const std::size_t kWhiteKnights = 1;
const std::size_t kWhiteBishops = 2;
const std::size_t kWhiteRooks = 3;
const std::size_t kWhiteQueens = 4;
const std::size_t kWhiteKing = 5;
const std::size_t kBlackPawns = 6;
const std::size_t kBlackKnights = 7;
const std::size_t kBlackBishops = 8;
const std::size_t kBlackRooks = 9;
const std::size_t kBlackQueens = 10;
const std::size_t kBlackKing = 11;
const std::size_t KAllPieces = 12;

const std::size_t kMoveCastling = 1;
const std::size_t kMoveCapture  = 2;
const std::size_t kMoveEnPassant = 3;

const std::array<uint64_t, 64> kWhitePawnsAttacks = {{
      0x200, 0x500, 0xa00, 0x1400, 0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 0x280000,
      0x500000, 0xa00000, 0x400000, 0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000, 0xa0000000,
      0x40000000, 0x200000000, 0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000,
      0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 0x280000000000, 0x500000000000,
      0xa00000000000, 0x400000000000, 0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000,
      0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}};

const std::array<uint64_t, 64> kBlackPawnsAttacks = {{
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x500, 0xa00, 0x1400,
      0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 0x280000, 0x500000, 0xa00000, 0x400000,
      0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000, 0x200000000,
      0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000, 0x4000000000, 0x20000000000,
      0x50000000000, 0xa0000000000, 0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000,
      0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000, 0x28000000000000, 0x50000000000000,
      0xa0000000000000, 0x40000000000000}};

const std::array<uint64_t, 64> kKingMoves = {{
      0X302, 0X705, 0Xe0a,0X1c14, 0X3828, 0X7050, 0Xe0a0, 0Xc040, 0X30203, 0X70507, 0Xe0a0e, 0X1c141c, 0X382838,
      0X705070, 0Xe0a0e0, 0Xc040c0, 0X3020300, 0X7050700, 0Xe0a0e00, 0X1c141c00, 0X38283800, 0X70507000,
      0Xe0a0e000, 0Xc040c000, 0X302030000, 0X705070000, 0Xe0a0e0000, 0X1c141c0000, 0X3828380000, 0X7050700000,
      0Xe0a0e00000, 0Xc040c00000, 0X30203000000, 0X70507000000, 0Xe0a0e000000, 0X1c141c000000, 0X382838000000,
      0X705070000000, 0Xe0a0e0000000, 0Xc040c0000000, 0X3020300000000, 0X7050700000000, 0Xe0a0e00000000,
      0X1c141c00000000, 0X38283800000000, 0X70507000000000, 0Xe0a0e000000000, 0Xc040c000000000, 0X302030000000000,
      0X705070000000000, 0Xe0a0e0000000000, 0X1c141c0000000000, 0X3828380000000000, 0X7050700000000000,
      0Xe0a0e00000000000, 0Xc040c00000000000, 0X203000000000000, 0X507000000000000, 0Xa0e000000000000,
      0X141c000000000000, 0X2838000000000000, 0X5070000000000000, 0Xa0e0000000000000, 0X40c0000000000000}};

const std::array<uint64_t, 64> kKnightMoves = {{
      0X20400, 0X50800, 0Xa1100, 0X142200, 0X284400, 0X508800, 0Xa01000, 0X402000, 0X2040004, 0X5080008, 0Xa110011,
      0X14220022, 0X28440044, 0X50880088, 0Xa0100010, 0X40200020, 0X204000402, 0X508000805, 0Xa1100110a,
      0X1422002214, 0X2844004428, 0X5088008850, 0Xa0100010a0, 0X4020002040, 0X20400040200, 0X50800080500,
      0Xa1100110a00, 0X142200221400, 0X284400442800, 0X508800885000, 0Xa0100010a000, 0X402000204000,
      0X2040004020000, 0X5080008050000, 0Xa1100110a0000, 0X14220022140000, 0X28440044280000, 0X50880088500000,
      0Xa0100010a00000, 0X40200020400000, 0X204000402000000, 0X508000805000000, 0Xa1100110a000000,
      0X1422002214000000, 0X2844004428000000, 0X5088008850000000, 0Xa0100010a0000000, 0X4020002040000000,
      0X400040200000000, 0X800080500000000, 0X1100110a00000000, 0X2200221400000000, 0X4400442800000000,
      0X8800885000000000, 0X100010a000000000, 0X2000204000000000, 0X4020000000000, 0X8050000000000,
      0X110a0000000000, 0X22140000000000, 0X44280000000000, 0X88500000000000, 0X10a00000000000, 0X20400000000000}};

const std::array<uint64_t, 64> kRookMasks = {{
      0x101010101017e, 0x202020202027c, 0x404040404047a, 0x8080808080876, 0x1010101010106e, 0x2020202020205e,
      0x4040404040403e, 0x8080808080807e, 0x1010101017e00, 0x2020202027c00, 0x4040404047a00, 0x8080808087600,
      0x10101010106e00, 0x20202020205e00, 0x40404040403e00, 0x80808080807e00, 0x10101017e0100,0x20202027c0200,
      0x40404047a0400, 0x8080808760800, 0x101010106e1000, 0x202020205e2000, 0x404040403e4000, 0x808080807e8000,
      0x101017e010100, 0x202027c020200, 0x404047a040400, 0x8080876080800, 0x1010106e101000, 0x2020205e202000,
      0x4040403e404000, 0x8080807e808000, 0x1017e01010100, 0x2027c02020200, 0x4047a04040400, 0x8087608080800,
      0x10106e10101000, 0x20205e20202000, 0x40403e40404000, 0x80807e80808000, 0x17e0101010100, 0x27c0202020200,
      0x47a0404040400, 0x8760808080800, 0x106e1010101000, 0x205e2020202000, 0x403e4040404000, 0x807e8080808000,
      0x7e010101010100, 0x7c020202020200, 0x7a040404040400, 0x76080808080800, 0x6e101010101000, 0x5e202020202000,
      0x3e404040404000, 0x7e808080808000, 0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400,
      0x7608080808080800, 0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000, 0x7e80808080808000}};

const std::array<uint64_t, 64> kRookMagics = {{
      0x80001b40002080, 0x1040004010012003, 0x100200041004830, 0x10801000a4800800, 0x80161800040080,
      0x210001000a040088, 0x9480208002000100, 0x8002210004c080, 0x2100800020804012, 0x44000601000c4,
      0x4008801000842002, 0x514808008001000, 0x101001068000500, 0x1004800401802200, 0x1021005402000100,
      0x809000100008442, 0x4080104002200042, 0x100081002100c001, 0x8000808050006001,0x101021001001000c,
      0x950030080100, 0x15808004010200, 0x8000040010022128, 0x8020008448401, 0x204308080014000, 0x4500240022001,
      0x400408200220050, 0x21000b0100100020, 0x4400a40080080080, 0x4102040080420080, 0x2000a00080429,
      0x20004200040189, 0x1400400021800084, 0x120412002401000, 0x4012200081801000, 0x11011001002048,
      0x2821800800401, 0x12000c82001008, 0x10001084400100a, 0x2001081020000c4, 0x10400829808000, 0x30004420014004,
      0x200102001050041, 0x10411200220008, 0x1481000800110004, 0x104200100802000c, 0x4002100118040002,
      0x804004102820004, 0x2100800060400480, 0x2000400100249100, 0x200180b00880, 0x2000100418210100,
      0x2004480082040080, 0x2a00060004008080, 0x10a0810110400, 0x40210044840200, 0x8002080010010c1,0x9028010400021,
      0x2284020001101, 0x81002010020409, 0x2006030080402, 0x40010002c4000801, 0x8010810021084, 0x4000404080210402}};

const std::array<uint64_t, 64> kBishopMasks = {{
      0x40201008040200, 0x402010080400, 0x4020100a00, 0x40221400, 0x2442800, 0x204085000, 0x20408102000,
      0x2040810204000, 0x20100804020000, 0x40201008040000, 0x4020100a0000, 0x4022140000, 0x244280000,
      0x20408500000, 0x2040810200000, 0x4081020400000, 0x10080402000200, 0x20100804000400, 0x4020100a000a00,
      0x402214001400, 0x24428002800, 0x2040850005000, 0x4081020002000, 0x8102040004000, 0x8040200020400,
      0x10080400040800, 0x20100a000a1000, 0x40221400142200, 0x2442800284400, 0x4085000500800, 0x8102000201000,
      0x10204000402000, 0x4020002040800, 0x8040004081000, 0x100a000a102000, 0x22140014224000, 0x44280028440200,
      0x8500050080400, 0x10200020100800, 0x20400040201000, 0x2000204081000, 0x4000408102000, 0xa000a10204000,
      0x14001422400000, 0x28002844020000, 0x50005008040200, 0x20002010080400, 0x40004020100800, 0x20408102000,
      0x40810204000, 0xa1020400000, 0x142240000000, 0x284402000000, 0x500804020000, 0x201008040200, 0x402010080400,
      0x2040810204000, 0x4081020400000, 0xa102040000000, 0x14224000000000, 0x28440200000000, 0x50080402000000,
      0x20100804020000, 0x40201008040200}};

const std::array<uint64_t, 64> kBishopMagics = {{
      0x1010040100440900, 0x1009100110410000, 0x1012c481000000, 0x4104041080008400, 0x10120210c8000000,
      0x882008028408, 0x800400ac10080000, 0x1808410210400, 0x41010100180a0, 0x8000080101040508, 0x44800830050,
      0x140400832020, 0x60420610010000, 0x2030c20140000, 0x140108029100, 0x8008400821021, 0xa200410042800,
      0x208010208080090, 0x840400c04008010, 0x1218000082810000, 0x6011000820080200, 0x2008022100a04,
      0x20880404040201, 0x2c800024010800, 0x20114008102100, 0x8a04018010100, 0x80200010a0a04, 0x885004004004200,
      0x201004000180a100, 0x810021001004208, 0x62020004008210, 0x2400803000820800, 0x202084000451000,
      0x88010410080820, 0x104002802040050, 0xc10820080080080, 0x140040101c0100, 0x8120320041000, 0x10012040030420,
      0x100c200028600, 0x8480a0804002000, 0x4140202002840, 0x4001001804008202, 0xa128004402, 0xa2060c000200,
      0x81901000c00080, 0x108010808800201, 0x8021040420800040, 0x601010802c00000, 0x240206100404, 0xc10041102400,
      0x8452084040000,  0x80801002120408, 0x24202012009000, 0x108021002020480, 0x8004100401202080, 0xc40094012000,
      0x8400020100880401, 0x208423080800, 0x8800040000420a04, 0x1008a2024400, 0x401400a040110, 0x8602002008108,
      0x1002180101020200}};

#endif // CONSTANTS_H
